# Workflow derived from https://github.com/r-lib/actions/tree/v2/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help
on:
  workflow_call:

name: test-coverage

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  test-coverage:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: |
            any::covr
            any::xml2
            any::dplyr
            any::knitr
          needs: coverage

      - name: Get package name
        run: |
          echo "PKGBUILD=$(awk -F: '/Package:/{gsub(/[ ]+/,""); print $2}' DESCRIPTION)" >> $GITHUB_ENV
        shell: bash

      - name: debug
        run: |
          echo $PKGNAME
        shell: bash

      - name: Run tests with coverage
        description: Run tests with coverage, install package, runs coverage and generate unittest Junit report.
        run: |
          covr::codecov(
            type = "none",
            code = "testthat::test_package(
              Sys.getenv('PKGNAME'),
              reporter = testthat::JunitReporter$new(file = file.path(normalizePath(Sys.getenv('GITHUB_WORKSPACE'), winslash = '/'), 'test-results.xml'))
              )",
            install_path = file.path(normalizePath(Sys.getenv("RUNNER_TEMP"), winslash = "/"), "package"),
            clean=FALSE,
            quiet=FALSE
            )
        shell: Rscript {0}

      - name: Show testthat output in console
        if: always()
        run: |
          ## --------------------------------------------------------------------
          find '${{ runner.temp }}/package' -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            test-results.xml

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-test-failures
          path: ${{ runner.temp }}/package

      - name: Create Coverage Report for comment
        run: |
          covr::package_coverage() |>
            covr::to_cobertura(filename = "cobertura.xml")

          xml <- xml2::read_xml("cobertura.xml")

          pkg_cov <- xml |>
            xml2::xml_find_first("packages/package") |>
            xml2::xml_attrs() |>
            dplyr::bind_rows()

          fnc_cov <- xml |>
            xml2::xml_find_first("packages/package") |>
            xml2::xml_find_all("classes/class") |>
            xml2::xml_attrs() |>
            lapply(dplyr::bind_rows)

          res <- list(pkg_cov, fnc_cov) |>
            dplyr::bind_rows() |>
            dplyr::transmute(
              Name = dplyr::coalesce(filename, name),
              `Coverage (%)` = round(as.numeric(`line-rate`)*100, digits = 2)
            ) |>
            knitr::kable()

          c("# Code coverage", res) |>
            writeLines(con = "coverage.md")
        shell: Rscript {0}

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          header: coverage
          path: coverage.md
